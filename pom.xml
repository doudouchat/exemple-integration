<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>exemple</groupId>
	<artifactId>exemple-integration</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<scm>
		<connection>scm:git:git://github.com/doudouchat/exemple-integration.git</connection>
		<developerConnection>scm:git:https://github.com/doudouchat/exemple-integration.git</developerConnection>
		<url>https://github.com/doudouchat/exemple-integration</url>
	</scm>

	<distributionManagement>
		<repository>
			<id>github</id>
			<name>GitHub doudouchat Packages</name>
			<url>https://maven.pkg.github.com/doudouchat/exemple-integration</url>
		</repository>
	</distributionManagement>

	<properties>

		<maven.build.timestamp.format>yyyy-MM-dd</maven.build.timestamp.format>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>

		<!-- TOMCAT -->
		<tomcat.container.id>tomcat9x</tomcat.container.id>
		<tomcat.version>9.0.40</tomcat.version>

		<application.log.file>${project.build.testOutputDirectory}/logback.groovy</application.log.file>
		<application.contextpath>ExempleService</application.contextpath>
		<application.host>http://localhost</application.host>

		<authorization.contextpath>ExempleAuthorization</authorization.contextpath>
		<authorization.host>http://localhost</authorization.host>

		<!-- RESOURCE -->
		<authorization.name>exemple-authorization-configuration</authorization.name>
		<authorization.path>file:${project.build.testOutputDirectory}/exemple-test.yml</authorization.path>

		<configuration.name>exemple-service-configuration</configuration.name>
		<configuration.path>file:${project.build.testOutputDirectory}/exemple-test.yml</configuration.path>

		<!-- API -->
		<cassandra.host>127.0.0.1</cassandra.host>
		<cassandra.port>9042</cassandra.port>
		<hazelcast.port>5705</hazelcast.port>
		<zookeeper.port>10024</zookeeper.port>

		<!-- VERSION -->

		<zookeeper-version>3.5.7</zookeeper-version>
		<cassandra-version>3.11.9</cassandra-version>

		<!-- SONAR -->

		<sonar.coverage.exclusions>**/integration/**/*.java</sonar.coverage.exclusions>
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<sonar.sources>${project.build.directory}/exemple-service,${project.build.directory}/exemple-authorization</sonar.sources>
		<sonar.cpd.exclusions>target/exemple-service/**,target/exemple-authorization/**</sonar.cpd.exclusions>

	</properties>

	<dependencyManagement>

		<dependencies>

			<!-- SPRING BOOT -->

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>2.4.3</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<!-- HAZELCAST -->

			<dependency>
				<groupId>com.hazelcast</groupId>
				<artifactId>hazelcast</artifactId>
				<version>4.1.2</version>
			</dependency>

			<!-- GROOVY -->

			<dependency>
				<groupId>org.codehaus.groovy</groupId>
				<artifactId>groovy</artifactId>
				<version>3.0.7</version>
			</dependency>

			<dependency>
				<groupId>org.codehaus.groovy</groupId>
				<artifactId>groovy-xml</artifactId>
				<version>3.0.7</version>
			</dependency>

			<!-- REST ASSURED -->

			<dependency>
				<groupId>io.rest-assured</groupId>
				<artifactId>rest-assured</artifactId>
				<version>4.3.3</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<groupId>io.rest-assured</groupId>
				<artifactId>rest-assured-all</artifactId>
				<version>4.3.3</version>
				<scope>test</scope>
			</dependency>

		</dependencies>

	</dependencyManagement>

	<dependencies>

		<!-- CASSANDRA EMBEDDED -->

		<dependency>
			<groupId>com.github.nosan</groupId>
			<artifactId>embedded-cassandra</artifactId>
			<version>4.0.1</version>
		</dependency>

		<dependency>
			<groupId>com.github.nosan</groupId>
			<artifactId>embedded-cassandra-spring-boot-starter</artifactId>
			<version>4.0.2</version>
		</dependency>

		<!-- CURATOR -->

		<dependency>
			<groupId>org.apache.curator</groupId>
			<artifactId>curator-test</artifactId>
			<version>5.1.0</version>
		</dependency>

		<!-- HAZELCAST -->

		<dependency>
			<groupId>com.hazelcast</groupId>
			<artifactId>hazelcast</artifactId>
		</dependency>

		<!-- SPRING KAFKA -->

		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
		</dependency>

		<!-- SPRING BOOT -->

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- GROOVY -->

		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy</artifactId>
		</dependency>

		<!-- API INTEGRATION -->

		<dependency>
			<groupId>exemple</groupId>
			<artifactId>exemple-service-api-integration</artifactId>
			<version>2.0.0-SNAPSHOT</version>
			<scope>test</scope>
		</dependency>

		<!-- RESOURCE -->

		<dependency>
			<groupId>exemple</groupId>
			<artifactId>exemple-service-resource</artifactId>
			<version>2.0.0-SNAPSHOT</version>
			<scope>test</scope>
		</dependency>

		<!-- APPLICATION -->

		<dependency>
			<groupId>exemple</groupId>
			<artifactId>exemple-service-application</artifactId>
			<version>2.0.0-SNAPSHOT</version>
			<scope>test</scope>
		</dependency>

		<!-- AUTHORIZATION -->

		<dependency>
			<groupId>exemple</groupId>
			<artifactId>exemple-authorization-server</artifactId>
			<version>1.0.1-SNAPSHOT</version>
			<scope>test</scope>
			<classifier>classes</classifier>
		</dependency>

		<!-- COMMONS APACHE -->

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.8.0</version>
			<scope>test</scope>
		</dependency>

		<!-- LOGGING -->

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>

		<!-- TEST -->

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- TESTNG -->

		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>7.4.0</version>
			<scope>test</scope>
		</dependency>

		<!-- JSOUP -->

		<dependency>
			<groupId>org.jsoup</groupId>
			<artifactId>jsoup</artifactId>
			<version>1.13.1</version>
			<scope>test</scope>
		</dependency>

		<!-- HAMCREST -->

		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-all</artifactId>
			<version>1.3</version>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<repositories>
		<repository>
			<id>jitpack.io</id>
			<url>https://jitpack.io</url>
		</repository>
	</repositories>

	<build>

		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
			<testResource>
				<directory>src/test/resources/contexts/test_company</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>

		<pluginManagement>

			<plugins>

				<!-- HELPER -->
				<!-- https://www.mojohaus.org/build-helper-maven-plugin/index.html -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>3.2.0</version>
				</plugin>

				<!-- DEPENDENCIES -->
				<!-- https://maven.apache.org/plugins/maven-dependency-plugin/index.html -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>3.1.2</version>
				</plugin>

				<!-- WAR -->
				<!-- http://maven.apache.org/plugins/maven-war-plugin/ -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
					<version>3.3.1</version>
				</plugin>

				<!-- VERSION -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>versions-maven-plugin</artifactId>
					<version>2.8.1</version>
					<configuration>
						<outputFile>${project.build.directory}/outdated-dependencies.txt</outputFile>
						<outputEncoding>${project.build.sourceEncoding}</outputEncoding>
					</configuration>
				</plugin>

				<!-- JACOCO -->
				<!-- http://www.eclemma.org/jacoco/trunk/doc/maven.html -->
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>0.8.6</version>
					<executions>
						<execution>
							<id>prepare-jacoco-integration-agent</id>
							<goals>
								<goal>prepare-agent-integration</goal>
							</goals>
							<phase>pre-integration-test</phase>
							<configuration>
								<propertyName>jacoco.it.agent.argLine</propertyName>
								<includes>
									<include>com.exemple.service.*</include>
									<include>com.exemple.authorization.*</include>
								</includes>
								<excludes>
									<exclude>*EnhancerBySpringCGLIB*</exclude>
									<exclude>*FastClassBySpringCGLIB*</exclude>
									<exclude>*__MapperGenerated*</exclude>
								</excludes>
								<classDumpDir>${project.build.outputDirectory}</classDumpDir>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<!-- COVERALLS -->
				<!-- https://github.com/trautonen/coveralls-maven-plugin -->
				<plugin>
					<groupId>org.eluder.coveralls</groupId>
					<artifactId>coveralls-maven-plugin</artifactId>
					<version>4.3.0</version>
					<configuration>
						<sourceDirectories>
							<sourceDirectory>${project.build.directory}/exemple-service</sourceDirectory>
							<sourceDirectory>${project.build.directory}/exemple-authorization</sourceDirectory>
						</sourceDirectories>
					</configuration>
				</plugin>

				<!-- SPRING BOOT -->
				<!-- https://docs.spring.io/spring-boot/docs/current/maven-plugin/index.html -->
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>2.4.3</version>
					<configuration>
						<jvmArguments>-Dlogging.config=file:${application.log.file}</jvmArguments>
						<jmxPort>${embedded.jmx.port}</jmxPort>
						<wait>3000</wait>
						<fork>true</fork>
					</configuration>
					<executions>
						<execution>
							<id>pre-integration-test</id>
							<goals>
								<goal>start</goal>
							</goals>
						</execution>
						<execution>
							<id>post-integration-test</id>
							<goals>
								<goal>stop</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- CARGO -->
				<!-- https://codehaus-cargo.github.io/cargo/Maven2+plugin.html -->
				<plugin>
					<groupId>org.codehaus.cargo</groupId>
					<artifactId>cargo-maven2-plugin</artifactId>
					<version>1.8.3</version>
					<configuration>
						<container>
							<containerId>${tomcat.container.id}</containerId>
							<output>${project.build.directory}/cargo/configurations/${tomcat.container.id}/logs/container.log</output>
							<timeout>180000</timeout>
							<artifactInstaller>
								<groupId>org.apache.tomcat</groupId>
								<artifactId>tomcat</artifactId>
								<version>${tomcat.version}</version>
							</artifactInstaller>
							<systemProperties>
								<spring.profiles.active>etude</spring.profiles.active>
							</systemProperties>
						</container>
						<configuration>
							<properties>
								<!-- le choix du port permet d'arrêter proprement le tomcat sans 
									être conflit avec un autre tomcat en cours d'exécution -->
								<cargo.servlet.port>${application.port}</cargo.servlet.port>
								<cargo.rmi.port>${cargo.rmi.port}</cargo.rmi.port>
								<cargo.tomcat.ajp.port>${cargo.ajp.port}</cargo.tomcat.ajp.port>
								<cargo.jvmargs>${jacoco.it.agent.argLine}
									-Dlogging.config=file:${application.log.file} -Xmx1g</cargo.jvmargs>
							</properties>
						</configuration>
					</configuration>
					<executions>
						<!-- start server before integration tests -->
						<execution>
							<id>start-container</id>
							<phase>pre-integration-test</phase>
							<goals>
								<goal>start</goal>
							</goals>
						</execution>
						<!-- stop server after integration tests -->
						<execution>
							<id>stop-container</id>
							<phase>post-integration-test</phase>
							<goals>
								<goal>stop</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- TEST INTEGRATION -->
				<!-- http://maven.apache.org/surefire/maven-failsafe-plugin/ -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>3.0.0-M4</version>
					<executions>
						<execution>
							<goals>
								<goal>integration-test</goal>
								<goal>verify</goal>
							</goals>
							<configuration>
								<encoding>${project.build.sourceEncoding}</encoding>
							</configuration>
						</execution>
					</executions>
				</plugin>

			</plugins>

		</pluginManagement>

		<plugins>

			<!-- VERSION -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
				<configuration>
					<processDependencyManagement>false</processDependencyManagement>
				</configuration>
			</plugin>

		</plugins>

	</build>

	<profiles>

		<profile>
			<id>webservice</id>

			<dependencies>

				<dependency>
					<groupId>${project.groupId}</groupId>
					<artifactId>exemple-service-api</artifactId>
					<version>2.0.0-SNAPSHOT</version>
					<type>war</type>
				</dependency>

				<dependency>
					<groupId>${project.groupId}</groupId>
					<artifactId>exemple-authorization-server</artifactId>
					<version>1.0.1-SNAPSHOT</version>
					<type>war</type>
				</dependency>

			</dependencies>

			<build>

				<plugins>

					<!-- HELPER -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>reserve-network-port</id>
								<goals>
									<goal>reserve-network-port</goal>
								</goals>
								<phase>process-resources</phase>
								<configuration>
									<portNames>
										<portName>application.port</portName>
										<portName>cargo.rmi.port</portName>
										<portName>cargo.ajp.port</portName>
										<portName>cassandra.port</portName>
										<portName>hazelcast.port</portName>
										<portName>zookeeeper.port</portName>
										<portName>kafka.port</portName>
										<portName>embedded.jmx.port</portName>
									</portNames>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- JACOCO -->
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
					</plugin>

					<!-- SPRING BOOT -->
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<configuration>
							<arguments>
								<argument>--spring.config.location=${configuration.path}</argument>
							</arguments>
						</configuration>
					</plugin>

					<!-- CARGO -->
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<configuration>
							<container>
								<dependencies>
									<dependency>
										<groupId>exemple</groupId>
										<artifactId>exemple-service-api-integration</artifactId>
									</dependency>
								</dependencies>
							</container>
							<ignoreFailures>true</ignoreFailures>
							<deployables>
								<deployable>
									<groupId>${project.groupId}</groupId>
									<artifactId>exemple-authorization-server</artifactId>
									<type>war</type>
									<properties>
										<context>/${authorization.contextpath}</context>
									</properties>
									<pingUrlPath>/${authorization.contextpath}/actuator/health</pingUrlPath>
								</deployable>
								<deployable>
									<groupId>${project.groupId}</groupId>
									<artifactId>exemple-service-api</artifactId>
									<type>war</type>
									<properties>
										<context>/${application.contextpath}</context>
									</properties>
									<pingUrlPath>/${application.contextpath}/actuator/health</pingUrlPath>
								</deployable>
							</deployables>
							<configuration>
								<properties>
									<cargo.resource.resource.spring>
										cargo.resource.name=spring.config.location|
										cargo.resource.type=java.lang.String|
										cargo.resource.parameters=factory=com.exemple.service.api.integration.core.PrimitivesAndStringFactory;value=classpath:default.yml,${configuration.path}
									</cargo.resource.resource.spring>
									<cargo.resource.resource.api>
										cargo.resource.name=${configuration.name}|
										cargo.resource.type=java.lang.String|
										cargo.resource.parameters=factory=com.exemple.service.api.integration.core.PrimitivesAndStringFactory;value=${configuration.path}
									</cargo.resource.resource.api>
									<cargo.resource.resource.authorization>
										cargo.resource.name=${authorization.name}|
										cargo.resource.type=java.lang.String|
										cargo.resource.parameters=factory=com.exemple.service.api.integration.core.PrimitivesAndStringFactory;value=${authorization.path}
									</cargo.resource.resource.authorization>
								</properties>
							</configuration>
						</configuration>
					</plugin>

				</plugins>
			</build>
		</profile>

		<profile>
			<id>it</id>

			<build>

				<plugins>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<suiteXmlFiles combine.children="append">
								<suiteXmlFile>testng.xml</suiteXmlFile>
							</suiteXmlFiles>
							<systemPropertyVariables>
								<application.host>${application.host}</application.host>
								<application.port>${application.port}</application.port>
								<application.contextpath>${application.contextpath}</application.contextpath>
								<authorization.host>${authorization.host}</authorization.host>
								<authorization.port>${application.port}</authorization.port>
								<authorization.contextpath>${authorization.contextpath}</authorization.contextpath>
							</systemPropertyVariables>
							<argLine>${jacoco.it.agent.argLine}</argLine>
						</configuration>
					</plugin>

				</plugins>
			</build>
		</profile>

		<profile>
			<id>report</id>
			<build>

				<plugins>

					<!-- HELPER -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>add-source</id>
								<goals>
									<goal>add-source</goal>
								</goals>
								<phase>pre-integration-test</phase>
								<configuration>
									<sources>
										<source>${project.build.directory}/exemple-service</source>
										<source>${project.build.directory}/exemple-authorization</source>
									</sources>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- DEPENDENCIES -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>unpack</id>
								<phase>package</phase>
								<goals>
									<goal>unpack</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>exemple</groupId>
											<artifactId>exemple-service</artifactId>
											<version>2.0.0-SNAPSHOT</version>
											<type>jar</type>
											<classifier>sources</classifier>
											<outputDirectory>${project.build.directory}/exemple-service</outputDirectory>
											<excludes>com/exemple/service/api/integration/**</excludes>
										</artifactItem>
										<artifactItem>
											<groupId>exemple</groupId>
											<artifactId>exemple-authorization</artifactId>
											<version>1.0.1-SNAPSHOT</version>
											<type>jar</type>
											<classifier>sources</classifier>
											<outputDirectory>${project.build.directory}/exemple-authorization</outputDirectory>
											<excludes>com/exemple/authorization/integration/**</excludes>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- JACOCO -->
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>report-integration</id>
								<phase>verify</phase>
								<goals>
									<goal>report-integration</goal>
								</goals>
								<configuration>
									<excludes>
										<exclude>com/exemple/service/customer/login/resource/LoginServiceResourceImpl*</exclude>
										<exclude>com/exemple/service/customer/login/validation/LoginValidationCustomImpl*</exclude>
										<exclude>com/exemple/service/customer/subscription/resource/SubscriptionServiceResourceImpl*</exclude>
										<exclude>com/exemple/service/customer/subscription/validation/SubscriptionValidationCustomImpl*</exclude>
										<exclude>com/exemple/service/customer/account/validation/AccountValidationCustomImpl*</exclude>
										<exclude>com/exemple/service/customer/account/resource/AccountServiceResourceImpl*</exclude>
										<exclude>com/exemple/service/customer/account/resource/TestAccountServiceResource*</exclude>
										<exclude>com/exemple/service/resource/**/mapper/*MapperBuilder*</exclude>
										<exclude>com/exemple/authorization/resource/**/mapper/*MapperBuilder*</exclude>
										<exclude>com/exemple/service/api/integration/**</exclude>
										<exclude>com/exemple/integration/**</exclude>
									</excludes>
								</configuration>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>

	</profiles>

</project>