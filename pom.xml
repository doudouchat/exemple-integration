<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-dependencies</artifactId>
		<version>2.7.4</version>
	</parent>
	<groupId>exemple</groupId>
	<artifactId>exemple-integration</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<scm>
		<connection>scm:git:git://github.com/doudouchat/exemple-integration.git</connection>
		<developerConnection>scm:git:https://github.com/doudouchat/exemple-integration.git</developerConnection>
		<url>https://github.com/doudouchat/exemple-integration</url>
	</scm>

	<distributionManagement>
		<repository>
			<id>github</id>
			<name>GitHub doudouchat Packages</name>
			<url>https://maven.pkg.github.com/doudouchat/exemple-integration</url>
		</repository>
	</distributionManagement>

	<properties>

		<maven.build.timestamp.format>yyyy-MM-dd</maven.build.timestamp.format>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>17</maven.compiler.source>
		<maven.compiler.target>17</maven.compiler.target>

		<!-- RESOURCE -->
		<configuration.path>file:${project.build.testOutputDirectory}/exemple-test.yml</configuration.path>

		<!-- VERSION -->
		<cassandra-version>3.11.13</cassandra-version>
		<jacoco-version>0.8.8</jacoco-version>

		<!-- SONAR -->
		<sonar.coverage.exclusions>**/integration/**/*.java</sonar.coverage.exclusions>
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<sonar.sources>${project.build.directory}/exemple-service,${project.build.directory}/exemple-authorization</sonar.sources>
		<sonar.cpd.exclusions>target/exemple-service/**,target/exemple-authorization/**</sonar.cpd.exclusions>

	</properties>

	<dependencyManagement>

		<dependencies>

			<!-- CUCUMBER -->

			<dependency>
				<groupId>io.cucumber</groupId>
				<artifactId>cucumber-java</artifactId>
				<version>7.8.0</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<groupId>io.cucumber</groupId>
				<artifactId>cucumber-spring</artifactId>
				<version>7.8.0</version>
			</dependency>

			<dependency>
				<groupId>io.cucumber</groupId>
				<artifactId>cucumber-junit-platform-engine</artifactId>
				<version>7.8.0</version>
				<scope>test</scope>
			</dependency>

			<!-- JUNIT PLATEFORM -->

			<dependency>
				<groupId>org.junit.platform</groupId>
				<artifactId>junit-platform-suite-api</artifactId>
				<version>1.8.2</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<groupId>org.junit.platform</groupId>
				<artifactId>junit-platform-suite-engine</artifactId>
				<version>1.8.2</version>
				<scope>test</scope>
			</dependency>

		</dependencies>

	</dependencyManagement>

	<dependencies>

		<!-- GROOVY -->

		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy</artifactId>
		</dependency>

		<!-- RESOURCE -->

		<dependency>
			<groupId>exemple</groupId>
			<artifactId>exemple-service-resource</artifactId>
			<version>3.0.0-SNAPSHOT</version>
			<scope>test</scope>
		</dependency>

		<!-- APPLICATION -->

		<dependency>
			<groupId>exemple</groupId>
			<artifactId>exemple-service-application</artifactId>
			<version>3.0.0-SNAPSHOT</version>
			<scope>test</scope>
		</dependency>

		<!-- AUTHORIZATION -->

		<dependency>
			<groupId>exemple</groupId>
			<artifactId>exemple-authorization-server</artifactId>
			<version>1.0.1-SNAPSHOT</version>
			<scope>test</scope>
		</dependency>

		<!-- COMMONS APACHE -->

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.11.0</version>
		</dependency>

		<!-- LOGGING -->

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- TEST -->

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- CUCUMBER -->

		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-java</artifactId>
		</dependency>

		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-spring</artifactId>
		</dependency>

		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-junit-platform-engine</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- JUNIT PLATEFORM -->

		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-suite-api</artifactId>
		</dependency>

		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-suite-engine</artifactId>
		</dependency>

		<!-- REST ASSURED -->

		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured</artifactId>
		</dependency>

		<!-- JSOUP -->

		<dependency>
			<groupId>org.jsoup</groupId>
			<artifactId>jsoup</artifactId>
			<version>1.15.3</version>
			<scope>test</scope>
		</dependency>

		<!-- ASSERTJ -->

		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>

		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
			<testResource>
				<directory>src/test/resources/contexts/test_company</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>

		<pluginManagement>

			<plugins>

				<!-- VERSION -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>versions-maven-plugin</artifactId>
					<configuration>
						<processDependencyManagement>false</processDependencyManagement>
						<outputFile>${project.build.directory}/outdated-dependencies.txt</outputFile>
						<outputEncoding>${project.build.sourceEncoding}</outputEncoding>
					</configuration>
				</plugin>

				<!-- JACOCO -->
				<!-- http://www.eclemma.org/jacoco/trunk/doc/maven.html -->
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco-version}</version>
				</plugin>

				<!-- COVERALLS -->
				<!-- https://github.com/trautonen/coveralls-maven-plugin -->
				<plugin>
					<groupId>org.eluder.coveralls</groupId>
					<artifactId>coveralls-maven-plugin</artifactId>
					<version>4.3.0</version>
					<dependencies>
						<dependency>
							<groupId>javax.xml.bind</groupId>
							<artifactId>jaxb-api</artifactId>
							<version>${javax-jaxb.version}</version>
						</dependency>
					</dependencies>
					<configuration>
						<sourceDirectories>
							<sourceDirectory>${project.build.directory}/exemple-service</sourceDirectory>
							<sourceDirectory>${project.build.directory}/exemple-authorization</sourceDirectory>
						</sourceDirectories>
					</configuration>
				</plugin>

				<!-- DOCKER -->
				<!-- http://dmp.fabric8.io/ -->
				<plugin>
					<groupId>io.fabric8</groupId>
					<artifactId>docker-maven-plugin</artifactId>
					<version>0.40.2</version>
				</plugin>

				<!-- TEST INTEGRATION -->
				<!-- http://maven.apache.org/surefire/maven-failsafe-plugin/ -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<executions>
						<execution>
							<goals>
								<goal>integration-test</goal>
								<goal>verify</goal>
							</goals>
							<configuration>
								<encoding>${project.build.sourceEncoding}</encoding>
							</configuration>
						</execution>
					</executions>
				</plugin>

			</plugins>

		</pluginManagement>

	</build>

	<profiles>

		<profile>
			<id>webservice</id>

			<build>

				<plugins>

					<!-- HELPER -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>reserve-network-port</id>
								<goals>
									<goal>reserve-network-port</goal>
								</goals>
								<phase>process-resources</phase>
								<configuration>
									<portNames>
										<portName>authorization.port</portName>
										<portName>service.port</portName>
										<portName>cassandra.port</portName>
										<portName>hazelcast.port</portName>
										<portName>zookeeper.port</portName>
										<portName>kafka.port</portName>
									</portNames>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- JACOCO -->
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>report-integration</id>
								<goals>
									<goal>report-integration</goal>
								</goals>
							</execution>
							<execution>
								<id>dump-authorization</id>
								<goals>
									<goal>dump</goal>
								</goals>
								<configuration>
									<address>127.0.0.1</address>
									<port>6300</port>
									<destFile>${project.build.directory}/jacoco-it.exec</destFile>
								</configuration>
							</execution>
							<execution>
								<id>dump-service</id>
								<goals>
									<goal>dump</goal>
								</goals>
								<configuration>
									<address>127.0.0.1</address>
									<port>6301</port>
									<destFile>${project.build.directory}/jacoco-it.exec</destFile>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- COPY JACOCO JAR AGENT -->

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>copy</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>copy</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>org.jacoco</groupId>
									<artifactId>org.jacoco.agent</artifactId>
									<version>${jacoco-version}</version>
									<classifier>runtime</classifier>
									<type>jar</type>
									<overWrite>false</overWrite>
									<outputDirectory>${project.build.directory}/lib</outputDirectory>
									<destFileName>jacocoagent.jar</destFileName>
								</artifactItem>
							</artifactItems>
						</configuration>
					</plugin>

					<!-- DOCKER -->
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>start_cassandra</id>
								<goals>
									<goal>start</goal>
								</goals>
								<configuration>
									<images>
										<image>
											<name>cassandra:${cassandra-version}</name>
											<alias>cassandra</alias>
											<run>
												<ports>
													<port>${cassandra.port}:9042</port>
												</ports>
												<wait>
													<log>(?s)Startup complete</log>
													<time>60000</time>
												</wait>
												<log>
													<date>default</date>
												</log>
											</run>
										</image>
									</images>
								</configuration>
							</execution>
							<execution>
								<id>start_zookeeper</id>
								<goals>
									<goal>start</goal>
								</goals>
								<configuration>
									<images>
										<image>
											<name>zookeeper:3.8.0</name>
											<alias>zookeeper</alias>
											<run>
												<ports>
													<port>${zookeeper.port}:2181</port>
												</ports>
												<wait>
													<time>5000</time>
												</wait>
												<log>
													<date>default</date>
												</log>
											</run>
										</image>
									</images>
								</configuration>
							</execution>
							<execution>
								<id>start_kafka</id>
								<goals>
									<goal>start</goal>
								</goals>
								<configuration>
									<images>
										<image>
											<name>bitnami/kafka:3.2.0</name>
											<alias>kafka</alias>
											<run>
												<ports>
													<port>9092:9092</port>
													<port>${kafka.port}:9093</port>
												</ports>
												<env>
													<ALLOW_PLAINTEXT_LISTENER>yes</ALLOW_PLAINTEXT_LISTENER>
													<KAFKA_CFG_ZOOKEEPER_CONNECT>172.17.0.1:${zookeeper.port}</KAFKA_CFG_ZOOKEEPER_CONNECT>
													<KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP>CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT</KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP>
													<KAFKA_CFG_LISTENERS>CLIENT://:9092,EXTERNAL://:9093</KAFKA_CFG_LISTENERS>
													<KAFKA_CFG_ADVERTISED_LISTENERS>CLIENT://localhost:9092,EXTERNAL://172.17.0.1:${kafka.port}</KAFKA_CFG_ADVERTISED_LISTENERS>
													<KAFKA_CFG_INTER_BROKER_LISTENER_NAME>CLIENT</KAFKA_CFG_INTER_BROKER_LISTENER_NAME>
												</env>
												<wait>
													<log>(?s)Startup complete</log>
													<time>120000</time>
												</wait>
												<log>
													<date>default</date>
												</log>
											</run>
										</image>
									</images>
								</configuration>
							</execution>
							<execution>
								<id>start_hazelcast</id>
								<goals>
									<goal>start</goal>
								</goals>
								<configuration>
									<images>
										<image>
											<name>hazelcast/hazelcast:4.2.5</name>
											<alias>hazelcast</alias>
											<run>
												<ports>
													<port>${hazelcast.port}:5701</port>
												</ports>
												<wait>
													<log>(?s)is STARTED</log>
													<time>60000</time>
												</wait>
												<log>
													<date>default</date>
												</log>
											</run>
										</image>
									</images>
								</configuration>
							</execution>
							<execution>
								<id>start_exemple_authorization</id>
								<goals>
									<goal>start</goal>
									<goal>copy</goal>
								</goals>
								<configuration>
									<images>
										<image>
											<name>exemple-authorization</name>
											<alias>exemple-authorization</alias>
											<run>
												<ports>
													<port>${authorization.port}:8080</port>
													<port>6300:6300</port>
												</ports>
												<env>
													<CATALINA_OPTS>-Dlogging.config=file:/usr/local/tomcat/etc/logback.xml -Dhazelcast.config=/usr/local/tomcat/etc/hazelcast.yaml -Dhazelcast.client.config=/usr/local/tomcat/etc/hazelcast-client.yaml</CATALINA_OPTS>
													<JAVA_TOOL_OPTIONS>-javaagent:/usr/local/tomcat/etc/lib/jacocoagent.jar=includes=com.exemple.authorization.*,excludes=*EnhancerBySpringCGLIB*:*FastClassBySpringCGLIB*:*__MapperGenerated*,output=tcpserver,address=*,classdumpdir=/usr/local/tomcat/etc/source</JAVA_TOOL_OPTIONS>
												</env>
												<volumes>
													<bind>
														<volume>${project.build.testOutputDirectory}/conf/authorization:/usr/local/tomcat/etc</volume>
														<volume>${project.basedir}/src/main/resources:/usr/local/tomcat/etc/certificat</volume>
														<volume>${project.build.directory}/lib:/usr/local/tomcat/etc/lib</volume>
													</bind>
												</volumes>
												<wait>
													<http>
														<url>http://localhost:${authorization.port}/ExempleAuthorization/actuator/health</url>
														<method>GET</method>
														<status>200</status>
													</http>
													<time>60000</time>
												</wait>
												<log>
													<date>default</date>
												</log>
											</run>
											<copy>
												<entries>
													<entry>
														<containerPath>/usr/local/tomcat/logs</containerPath>
														<hostDirectory>${project.build.directory}/logs/authorization</hostDirectory>
													</entry>
													<entry>
														<containerPath>/usr/local/tomcat/etc/source/com</containerPath>
														<hostDirectory>${project.build.outputDirectory}</hostDirectory>
													</entry>
												</entries>
											</copy>
										</image>
									</images>
								</configuration>
							</execution>
							<execution>
								<id>start_exemple_service</id>
								<goals>
									<goal>start</goal>
									<goal>copy</goal>
								</goals>
								<configuration>
									<images>
										<image>
											<name>exemple-service</name>
											<alias>exemple-service</alias>
											<run>
												<ports>
													<port>${service.port}:8080</port>
													<port>6301:6301</port>
												</ports>
												<env>
													<CATALINA_OPTS>-Dlogging.config=file:/usr/local/tomcat/etc/logback.xml -Dhazelcast.client.config=/usr/local/tomcat/etc/hazelcast.yaml</CATALINA_OPTS>
													<JAVA_TOOL_OPTIONS>-javaagent:/usr/local/tomcat/etc/lib/jacocoagent.jar=includes=com.exemple.service.*,excludes=*EnhancerBySpringCGLIB*:*FastClassBySpringCGLIB*:*__MapperGenerated*,output=tcpserver,address=*,port=6301,classdumpdir=/usr/local/tomcat/etc/source</JAVA_TOOL_OPTIONS>
												</env>
												<volumes>
													<bind>
														<volume>${project.build.testOutputDirectory}/conf/service:/usr/local/tomcat/etc</volume>
														<volume>${project.build.directory}/lib:/usr/local/tomcat/etc/lib</volume>
													</bind>
												</volumes>
												<wait>
													<http>
														<url>http://localhost:${service.port}/ExempleService/actuator/health</url>
														<method>GET</method>
														<status>200</status>
													</http>
													<time>60000</time>
												</wait>
												<log>
													<date>default</date>
												</log>
											</run>
											<copy>
												<entries>
													<entry>
														<containerPath>/usr/local/tomcat/logs</containerPath>
														<hostDirectory>${project.build.directory}/logs/service</hostDirectory>
													</entry>
													<entry>
														<containerPath>/usr/local/tomcat/etc/source/com</containerPath>
														<hostDirectory>${project.build.outputDirectory}</hostDirectory>
													</entry>
												</entries>
											</copy>
										</image>
									</images>
								</configuration>
							</execution>
							<execution>
								<id>stop_all</id>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>

		<profile>
			<id>it</id>

			<build>

				<plugins>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<systemPropertyVariables>
								<service.port>${service.port}</service.port>
								<authorization.port>${authorization.port}</authorization.port>
							</systemPropertyVariables>
						</configuration>
					</plugin>

				</plugins>
			</build>
		</profile>

		<profile>
			<id>report</id>
			<build>

				<plugins>

					<!-- HELPER -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>add-source</id>
								<goals>
									<goal>add-source</goal>
								</goals>
								<phase>pre-integration-test</phase>
								<configuration>
									<sources>
										<source>${project.build.directory}/exemple-service</source>
										<source>${project.build.directory}/exemple-authorization</source>
									</sources>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- DEPENDENCIES -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>unpack</id>
								<phase>package</phase>
								<goals>
									<goal>unpack</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>exemple</groupId>
											<artifactId>exemple-service</artifactId>
											<version>3.0.0-SNAPSHOT</version>
											<type>jar</type>
											<classifier>sources</classifier>
											<outputDirectory>${project.build.directory}/exemple-service</outputDirectory>
										</artifactItem>
										<artifactItem>
											<groupId>exemple</groupId>
											<artifactId>exemple-authorization</artifactId>
											<version>1.0.1-SNAPSHOT</version>
											<type>jar</type>
											<classifier>sources</classifier>
											<outputDirectory>${project.build.directory}/exemple-authorization</outputDirectory>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- JACOCO -->
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>report-integration</id>
								<phase>verify</phase>
								<goals>
									<goal>report-integration</goal>
								</goals>
								<configuration>
									<excludes>
										<exclude>com/exemple/service/customer/account/AccountService*</exclude>
										<exclude>com/exemple/service/customer/subscription/SubscriptionService*</exclude>
										<exclude>com/exemple/service/resource/**/mapper/*MapperBuilder*</exclude>
										<exclude>com/exemple/authorization/resource/**/mapper/*MapperBuilder*</exclude>
										<exclude>com/exemple/integration/**</exclude>
									</excludes>
								</configuration>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>

	</profiles>

</project>